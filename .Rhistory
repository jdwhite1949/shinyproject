df1$Lo_80 <- suppressWarnings(as.numeric(df$Lo_80))
df1$Hi_80 <- suppressWarnings(as.numeric(df$Hi_80))
df1$Lo_90 <- suppressWarnings(as.numeric(df$Lo_90))
df1$Hi_90 <- suppressWarnings(as.numeric(df$Hi_90))
}
df1
rm(series.data, data.capture, df1)
rm(obs.mon, obs.L80, obs.H80, obs.L90, obs.H90)
rm(i)
df[,4]
series.data <- data.forecast
data.capture <- capture.output(series.data)
df1 <- data.frame(Month=character(), Forecast=character(), Lo_80=character(),
Hi_80=character(), Lo_90=character(), Hi_90=character())
for(i in 2:13){
# convert string data to data frame
obs.mon <- gsub(" ", "", substring(data.capture[i], 1, 14))
obs.fore <- gsub(" ", "", substring(data.capture[i], 15, 23))
obs.L80 <- gsub(" ", "", substring(data.capture[i], 24, 32))
obs.H80 <- gsub(" ", "", substring(data.capture[i], 33, 41))
obs.L90 <- gsub(" ", "", substring(data.capture[i], 42, 50))
obs.H90 <- gsub(" ", "", substring(data.capture[i], 51, 59))
df1[i,1] <- obs.mon
df1[i,2] <- obs.fore
df1[i,3] <- obs.L80
df1[i.4] <- obs.H80
df1[i,5] <- obs.L90
df1[i,6] <- obs.H90
# change class fo selected columns in data frame
df1$Forecast <- suppressWarnings(as.numeric(df$Forecast))
df1$Lo_80 <- suppressWarnings(as.numeric(df$Lo_80))
df1$Hi_80 <- suppressWarnings(as.numeric(df$Hi_80))
df1$Lo_90 <- suppressWarnings(as.numeric(df$Lo_90))
df1$Hi_90 <- suppressWarnings(as.numeric(df$Hi_90))
}
df1
rm(obs.mon, obs.L80, obs.H80, obs.L90, obs.H90)
rm(i)
series.data <- data.forecast
data.capture <- capture.output(series.data)
df1 <- data.frame(Month=character(), Forecast=character(), Lo_80=character(),
Hi_80=character(), Lo_90=character(), Hi_90=character())
names(df1)
for(i in 2:13){
# convert string data to data frame
obs.mon <- gsub(" ", "", substring(data.capture[i], 1, 14))
obs.fore <- gsub(" ", "", substring(data.capture[i], 15, 23))
obs.L80 <- gsub(" ", "", substring(data.capture[i], 24, 32))
obs.H80 <- gsub(" ", "", substring(data.capture[i], 33, 41))
obs.L90 <- gsub(" ", "", substring(data.capture[i], 42, 50))
obs.H90 <- gsub(" ", "", substring(data.capture[i], 51, 59))
df1[i-1,1] <- obs.mon
df1[i-1,2] <- obs.fore
df1[i-1,3] <- obs.L80
df1[i-1.4] <- obs.H80
df1[i-1,5] <- obs.L90
df1[i-1,6] <- obs.H90
# change class fo selected columns in data frame
df1$Forecast <- suppressWarnings(as.numeric(df$Forecast))
df1$Lo_80 <- suppressWarnings(as.numeric(df$Lo_80))
df1$Hi_80 <- suppressWarnings(as.numeric(df$Hi_80))
df1$Lo_90 <- suppressWarnings(as.numeric(df$Lo_90))
df1$Hi_90 <- suppressWarnings(as.numeric(df$Hi_90))
}
df1
rm(obs.mon, obs.L80, obs.H80, obs.L90, obs.H90)
rm(i)
series.data <- data.forecast
data.capture <- capture.output(series.data)
df1 <- data.frame(Month=character(), Forecast=character(), Lo_80=character(),
Hi_80=character(), Lo_90=character(), Hi_90=character())
for(i in 2:13){
# convert string data to data frame
obs.mon <- gsub(" ", "", substring(data.capture[i], 1, 14))
obs.fore <- gsub(" ", "", substring(data.capture[i], 15, 23))
obs.L80 <- gsub(" ", "", substring(data.capture[i], 24, 32))
obs.H80 <- gsub(" ", "", substring(data.capture[i], 33, 41))
obs.L90 <- gsub(" ", "", substring(data.capture[i], 42, 50))
obs.H90 <- gsub(" ", "", substring(data.capture[i], 51, 59))
df1[i-1,1] <- obs.mon
df1[i-1,2] <- obs.fore
df1[i-1,3] <- obs.L80
df1[i-1,4] <- obs.H80
df1[i-1,5] <- obs.L90
df1[i-1,6] <- obs.H90
# change class fo selected columns in data frame
df1$Forecast <- suppressWarnings(as.numeric(df$Forecast))
df1$Lo_80 <- suppressWarnings(as.numeric(df$Lo_80))
df1$Hi_80 <- suppressWarnings(as.numeric(df$Hi_80))
df1$Lo_90 <- suppressWarnings(as.numeric(df$Lo_90))
df1$Hi_90 <- suppressWarnings(as.numeric(df$Hi_90))
}
fd1
df1
rm(obs.mon, obs.L80, obs.H80, obs.L90, obs.H90)
rm(i)
rm(df1)
rm(data.capture)
rm(series.data)
rm(x, y)
rm(obs,*)
rm(ls(pattern = '^obs'))
rm(obs.fore)
rm(j)
rm(len)
rm(id)
rm(mon)
rm(n)
rm(n.sub)
rm(obs.date)
rm(obs.value)
rm(result)
rm(start.mon)
rm(start.year)
rm(ts.values)
series.data <- data.forecast
data.capture <- capture.output(series.data)
df1 <- data.frame(Month=character(), Forecast=character(), Lo_80=character(),
Hi_80=character(), Lo_90=character(), Hi_90=character())
for(i in 2:13){
# convert string data to data frame
obs.mon <- gsub(" ", "", substring(data.capture[i], 1, 14))
obs.fore <- gsub(" ", "", substring(data.capture[i], 15, 23))
obs.L80 <- gsub(" ", "", substring(data.capture[i], 24, 32))
obs.H80 <- gsub(" ", "", substring(data.capture[i], 33, 41))
obs.L90 <- gsub(" ", "", substring(data.capture[i], 42, 50))
obs.H90 <- gsub(" ", "", substring(data.capture[i], 51, 59))
df1[i-1,1] <- obs.mon
df1[i-1,2] <- obs.fore
df1[i-1,3] <- obs.L80
df1[i-1,4] <- obs.H80
df1[i-1,5] <- obs.L90
df1[i-1,6] <- obs.H90
}
df1
df1$Forecast <- suppressWarnings(as.numeric(df$Forecast))
df1$Lo_80 <- suppressWarnings(as.numeric(df$Lo_80))
df1$Hi_80 <- suppressWarnings(as.numeric(df$Hi_80))
df1$Lo_90 <- suppressWarnings(as.numeric(df$Lo_90))
df1$Hi_90 <- suppressWarnings(as.numeric(df$Hi_90))
class(df1$Forecast)
df1$Forecast <- as.numeric(df1$Forecast)
str(df1)
?round
x2 <- pi * 100^(-1:3)
round(x2, 3)
x2
rm(df1, df2, data.capture, series.data, obs.H80, obs.H90, obs.L80, obs.L90, obs.mon, obs.fore)
rm(i, x2)
series.data <- data.forecast
data.capture <- capture.output(series.data)
df1 <- data.frame(Month=character(), Forecast=numeric(), Lo_80=numeric(),
Hi_80=numeric(), Lo_90=numeric(), Hi_90=numeric())
for(i in 2:13){
# convert string data to data frame
obs.mon <- substring(data.capture[i], 8, 14)
obs.fore <- gsub(" ", "", substring(data.capture[i], 15, 23))
obs.L80 <- gsub(" ", "", substring(data.capture[i], 24, 32))
obs.H80 <- gsub(" ", "", substring(data.capture[i], 33, 41))
obs.L90 <- gsub(" ", "", substring(data.capture[i], 42, 50))
obs.H90 <- gsub(" ", "", substring(data.capture[i], 51, 59))
df1[i-1,1] <- obs.mon
df1[i-1,2] <- round(as.numeric(obs.fore), 3)
df1[i-1,3] <- round(as.numeric(obs.L80), 3)
df1[i-1,4] <- round(as.numeric(obs.H80), 3)
df1[i-1,5] <- round(as.numeric(obs.L90), 3)
df1[i-1,6] <- round(as.numeric(obs.H90), 3)
}
df1
obs.mon <- substring(data.capture[i], 8, 14)
substring(data.capture[1], 8, 14)
substring(data.capture[2], 8, 14)
data.capture
rm(df1, df2, data.capture, series.data, obs.H80, obs.H90, obs.L80, obs.L90, obs.mon, obs.fore)
rm(i)
series.data <- data.forecast
data.capture <- capture.output(series.data)
df1 <- data.frame(Month=character(), Forecast=numeric(), Lo_80=numeric(),
Hi_80=numeric(), Lo_90=numeric(), Hi_90=numeric())
for(i in 2:13){
# convert string data to data frame
obs.mon <- gsub("  ", "", substring(data.capture[i], 1, 14))
obs.fore <- gsub(" ", "", substring(data.capture[i], 15, 23))
obs.L80 <- gsub(" ", "", substring(data.capture[i], 24, 32))
obs.H80 <- gsub(" ", "", substring(data.capture[i], 33, 41))
obs.L90 <- gsub(" ", "", substring(data.capture[i], 42, 50))
obs.H90 <- gsub(" ", "", substring(data.capture[i], 51, 59))
df1[i-1,1] <- obs.mon
df1[i-1,2] <- round(as.numeric(obs.fore), 3)
df1[i-1,3] <- round(as.numeric(obs.L80), 3)
df1[i-1,4] <- round(as.numeric(obs.H80), 3)
df1[i-1,5] <- round(as.numeric(obs.L90), 3)
df1[i-1,6] <- round(as.numeric(obs.H90), 3)
}
df1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tableOutput
runApp()
data.forecast$method
runApp()
decompose(data.forecast)
class(data.forecast)
runApp()
library(devtools)
library(slidify)
author("ED_deck")
library(knitr)
job         :
slidify(index.Rmd)
setwd("C:/Users/James/Desktop/Coursera/DataScience/Repositories/Developing-Data-Products/Shiny Project/ED_deck")
slidify(("index.Rmd"))
browseURL("index.html")
slidify(("index.Rmd"))
browseURL("index.html")
slidify(("index.Rmd"))
browseURL("index.html")
slidify(("index.Rmd"))
browseURL("index.html")
api.key <-  "d4f3a2d6533bd888e813ca01c9617ea9"
fred.url <- "https://api.stlouisfed.org/fred/series/observations?series_id="
id <- ""UNRATE""
id <- "UNRATE"
fred.data <- GET(paste0(fred.url, id, "&api_key=", api.key))
fred.url
class(fred.data)
save(fred.data, file = "fred_data.RData")
fred.xml.doc <- xmlTreeParse(fred.data)
fred.xml.doc$doc$children$observations[1]
fred.xml.doc$doc$children$observations$observation[1]
fred.xml.doc$doc$children$observations$observation[2]
fred.xml.doc$doc$children$observations$[[1]]
fred.xml.doc$doc$children$observations[1]
fred.xml.doc$doc$children$observations[2]
fred.xml.doc$doc$children$observations[[1]]
fred.xml.doc$doc$children$observations[[1:3]]
fred.xml.doc$doc$children$observations[1:3]
fred.xml.doc$doc$children$observations[1]
fred.xml.doc$doc$children$observations[[1]]
fred.xml.doc$doc$children$observations[[1:3]]
head(fred.xml.doc$doc$children$observations)
fred.xml.doc$doc$children$observations$observation
fred.xml.doc$doc$children$observations[1:3]
x <- fred.xml.doc$doc$children$observations[1:3]
x
x[1:3]
slidify(("index.Rmd"))
browseURL("index.html")
slidify(("index.Rmd"))
browseURL("index.html")
slidify(("index.Rmd"))
browseURL("index.html")
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
fred.xml.doc$doc$children$observations[[1]]
rm(x)
x <- fred.xml.doc$doc$children$observations[[1]]
class(x)
x <- toString(fred.xml.doc$doc$children$observations[[1]])
c
x
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
q()
library(shiny)
runApp("../Shiny Project")
library(slidify)
slidify("index.Rmd")
setwd("C:/Users/James/Desktop/Coursera/DataScience/Repositories/Developing-Data-Products/Shiny Project/ED_deck")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
suppressMessages(library(shiny))
suppressMessages(library(XML))
suppressMessages(library(httr))
suppressMessages(library(forecast))
options(stringsAsFactors = FALSE)
FedId <- read.csv("FREDID.csv", header = TRUE)
fred.choices <- as.list(FedId$selBoxValue)
api.key <-  "d4f3a2d6533bd888e813ca01c9617ea9"
# assign FRED url to variable
fred.url <- "https://api.stlouisfed.org/fred/series/observations?series_id="
sel <- "Umemployment Rate"
selection <- FedId[which(FedId$selBoxValue==sel), 2]
selection
sel <- "Unemployment Rate"
selection <- FedId[which(FedId$selBoxValue==sel), 2]
fred.data <- GET(paste0(fred.url, "UNRATE", "&api_key=", api.key))
fred.xml.doc <- xmlTreeParse(fred.data)
df <- data.frame(date=character(), value=character()) #init data frame
n <- xmlSize(fred.xml.doc$doc$children$observations) # init number var
for(i in 1:n){
obs.date <- xmlGetAttr(fred.xml.doc$doc$children$observations[[i]], "date")
obs.value <- xmlGetAttr(fred.xml.doc$doc$children$observations[[i]], "value")
df[i, 1] <- obs.date
df[i, 2] <- obs.value
}
df$date <- as.Date(df$date)
df$value <- suppressWarnings(as.numeric(df$value))
n.sub <- n-120
start.year <- as.numeric(format(df$date[n.sub], "%Y"))
start.mon <- as.numeric(format(df$date[n.sub], "%m"))
ts.values <- df$value[n.sub:n]
class(ts.values)
?save
save(ts.value, file = "ts_value.RData")
save(ts.values, file = "ts_value.RData")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("C:/Users/James/Desktop/Coursera/DataScience/Repositories/Developing-Data-Products/Shiny Project/ED_deck")
load(ts_value.RData)
load(tsvalue.RData)
suppressMessages(library(shiny))
suppressMessages(library(XML))
suppressMessages(library(httr))
suppressMessages(library(forecast))
options(stringsAsFactors = FALSE)
FedId <- read.csv("FREDID.csv", header = TRUE)
fred.choices <- as.list(FedId$selBoxValue)
api.key <-  "d4f3a2d6533bd888e813ca01c9617ea9"
fred.url <- "https://api.stlouisfed.org/fred/series/observations?series_id="
sel <- "Unemployment Rate"
selection <- FedId[which(FedId$selBoxValue==sel), 2]
fred.data <- GET(paste0(fred.url, "UNRATE", "&api_key=", api.key))
fred.xml.doc <- xmlTreeParse(fred.data)
df <- data.frame(date=character(), value=character()) #init data frame
n <- xmlSize(fred.xml.doc$doc$children$observations) # init number var
for(i in 1:n){
obs.date <- xmlGetAttr(fred.xml.doc$doc$children$observations[[i]], "date")
obs.value <- xmlGetAttr(fred.xml.doc$doc$children$observations[[i]], "value")
df[i, 1] <- obs.date
df[i, 2] <- obs.value
}
df$date <- as.Date(df$date)
df$value <- suppressWarnings(as.numeric(df$value))
n.sub <- n-120
start.year <- as.numeric(format(df$date[n.sub], "%Y"))
start.mon <- as.numeric(format(df$date[n.sub], "%m"))
ts.values <- df$value[n.sub:n]
save(ts.values, file = "tsvalue.RData")
rm(ts.values)
load("tsvalue.RData")
slidify("index.Rmd")
suppressMessages(library(shiny))
suppressMessages(library(XML))
suppressMessages(library(httr))
suppressMessages(library(forecast))
options(stringsAsFactors = FALSE)
FedId <- read.csv("FREDID.csv", header = TRUE)
fred.choices <- as.list(FedId$selBoxValue)
# assign api key to variable
api.key <-  "d4f3a2d6533bd888e813ca01c9617ea9"
# assign FRED url to variable
fred.url <- "https://api.stlouisfed.org/fred/series/observations?series_id="
sel <- "Unemployment Rate"
selection <- FedId[which(FedId$selBoxValue==sel), 2]
fred.data <- GET(paste0(fred.url, "UNRATE", "&api_key=", api.key))
# parse XML data
fred.xml.doc <- xmlTreeParse(fred.data)
# create empty data frame
df <- data.frame(date=character(), value=character()) #init data frame
# get length of data vector
n <- xmlSize(fred.xml.doc$doc$children$observations) # init number var
# xml data to data frame
for(i in 1:n){
obs.date <- xmlGetAttr(fred.xml.doc$doc$children$observations[[i]], "date")
obs.value <- xmlGetAttr(fred.xml.doc$doc$children$observations[[i]], "value")
df[i, 1] <- obs.date
df[i, 2] <- obs.value
}
# change variable classes
df$date <- as.Date(df$date)
df$value <- suppressWarnings(as.numeric(df$value))
# set variable to acquire date from 120 months ago to present
n.sub <- n-120
start.year <- as.numeric(format(df$date[n.sub], "%Y"))
start.mon <- as.numeric(format(df$date[n.sub], "%m"))
ts.values <- df$value[n.sub:n]
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library("slidify", lib.loc="~/R/win-library/3.2")
slidify("index.Rmd")
q()
library(slidify)
setwd("C:/Users/James/Desktop/Coursera/DataScience/Repositories/Developing-Data-Products/Shiny Project/ED_deck")
slidify("index.Rmd")
browseURL("index,html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
q()
library(shiny)
setwd("C:/Users/James/Desktop/Coursera/DataScience/Repositories/Developing-Data-Products/Shiny Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
suppressMessages(library(shiny))
suppressMessages(library(XML))
suppressMessages(library(httr))
suppressMessages(library(forecast))
options(stringsAsFactors = FALSE)
FedId <- read.csv("FREDID.csv", header = TRUE)
fred.choices <- as.list(FedId$selBoxValue)
api.key <-  "d4f3a2d6533bd888e813ca01c9617ea9"
fred.url <- "https://api.stlouisfed.org/fred/series/observations?series_id="
id <- "UNRATE"
# get data in XML format
fred.data <- GET(paste0(fred.url, id, "&api_key=", api.key))
# parse XML data
fred.xml.doc <- xmlTreeParse(fred.data)
fred.xml.doc
rm(data.forecast, fred.data, fred.xml.doc, id)
fred,choices
fred.choices
id <- "DSPI"
# get data in XML format
fred.data <- GET(paste0(fred.url, id, "&api_key=", api.key))
# parse XML data
fred.xml.doc <- xmlTreeParse(fred.data)
fred.xml.doc$doc$file
fred.xml.doc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
library(rsconnect)
library(shinyapps)
deployApp()
rsconnect::setAccountInfo(name='jdwhite1949', token='09E5040DAE5A9758BB355D6BF18C1246', secret='MT0WJmz29N2N+qJf6HW0CozAFHqokQP4SkMmlcM0')
deployApp()
runApp()
rsconnect::deployApp()
getwd()
